<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprS2SonicIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Main Values</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// ==== Debug Mode ======================================================================    
    
    DebugMode                   = global.DebugMode;

    if(DebugMode == true){
        global.ChaosEmeralds   = 127;
        global.Rings           = 100;
    }

// ==== Create Camera ===================================================================
     
    PlayerId                    = instance_number(objPlayer)-1;
   
    Camera                      = instance_create(x, y, objCamera);
    Camera.Id                   = PlayerId; 
    CameraLock                  = false;
    
// ==== Setup player values =============================================================   
 
    depth                      += PlayerId;
    global.Player[PlayerId]     = id;  
    CharacterId                 = global.Character[PlayerId]; 
    
    // ---- Character movement ----------------------------------------------------------

        // .... Movement values .........................................................
        Speed                   = 0;
        Gravity                 = 0;

        // - If you want to change these values change the values below.
            Acceleration            = 0.046875;   
            GravityRate             = 0.21875;   
    
            JumpHeight              = -6.5;
            JumpRelease             = -4; 
            SkidRate                = 0.5;
        // ----------------------
        // ---------------------- 
            AccelRate               = 0.046875; 
    
            JumpValueWater          = -3.5;
            JumpReleaseWater        = -2;
    
            JumpValue               = -6.5;
            JumpReleaseValue        = -4;
        // ----------------------    
    
        JumpVariable            = false; 
        
        // .... Action values ...........................................................
        SpindashMin             = 8;     // - Minimum Spindash Speed .
        SpindashMax             = 12;    // - Maximum Spindash Speed.
        SpindashRev             = 0;
        SpindashRevAmount       = 2;     // - How much Speed is added per button press.
        
        Invincibility            = 0;
        InvincibilityTimer       = 0;
        InvAngle                 = 0;
        
        SpeedSneakers           = false;
        SpeedSneakersTimer      = 0;
        
        Shield                  = 0;
        ShieldUsable            = true;
        ShieldAction            = false;
        
        // - (If you want shorter or longer fly times change both of these values) - 
            FlyTimer                = 480; // Current Fly Time.
            MaxFlyTimer             = 480; // Maximum Fly Time.
        // ---------------------------

        FlyFlag                 = 0;

        SuperFormTimer          = 0;
        
        // .... Other values ............................................................
        Angle                   = 0;     
        AngleMode               = 0;     // - Floor Mode
        AngleLast               = 0;
        AngleLast2              = 0;
        Ground                  = false; 

        QuicksandGravity        = 0.35;  // - Quicksand Gimmick Gravity.
        
        TerrainLeft             = noone;
        TerrainRight            = noone;
        TerrainId               = noone;
        
        LeftEdge                = 30;
        RightEdge               = 30;
        Layer                   = 0;

        Action                  = consActionNormal;
        Homing                  = false;
        HomingIns               = noone;
        
        DasherId                = noone;

        EnemyChain              = 0;
        Underwater              = false;
        UnderwaterTimer         = 1200;
        
        SuperForm               = false;
        HyperForm               = false;
        DisableSuper            = false;

        Landed                  = false;

        GrabType                = 0;

        Deform                  = false;

        ForceRoll               = false;

        FlagsAllowXMovement     = true;
        FlagsAllowYMovement     = true;
        FlagsAllowObjectHandle  = true;

        Fan                     = false;

        if(global.Checkpoint == true){
            x = global.CheckpointX;
            y = global.CheckpointY;
        }
        

    // .... Configuration values .........................................................
     
        Spindash                = global.Spindash;         // - 0: Off, 1: Genesis, 2: CD
        //CDSpindash              = false;                 // - If set to true, Spindash will behave like it does in Sonic CD

        SKMonitors              = false;

        RollJumpLock            = true;                  // - Lock controls when jumping after a roll.
        RollMoveLock            = false;                 // - Prevent Rolling when pressing left or right.

        Angle360Detection       = false;                 // - If set to true angles will be detected smoother, but using a different method then Sonic 2.
        AngleBothSensors        = true;                  // - If set to true, both sensors must return a terrain object to check for angles.
        AngleModeSwitchMode     = 0;                     // - If set to 0, it will follow a more accurate angle mode switch(Reccomended).
        
        SlopeFactorMode         = 0;                     // - 0: Sonic 1 &amp; 2, 1: Sonic 3, 2: Sonic 3?

        Use360SpriteRotation    = global.RotationMode;   // - If set to true characters will use 360 degree sprite rotations, false for 8 degree rotations.
        UseWorldsRotation       = false;                 // - If set to true, the player will only rotate if angle is greater than 45 degrees(Only applies to 360 rotation).        

        UseSuperForms           = true                   // - If set to true, characters with Super forms can transform.
        ShowShieldsInv          = false;                 // - If set to true, elemental shields will be visible when super or invicible.
        UseShieldSuper          = false;                 // - If set to true, elemental shields are usable when Super.

        Sonic3RollReq           = false;                 // - If set to true, the speed required for a roll will be the same as Sonic 3, otherwise the same as Sonic 1 &amp; 2.

        TrailType               = global.UseTrail;       // - If set to true, Players will have a trail following them.

        UseHoming               = true;                  // - If set to true, Sonic can perform a homing attack and air dash.
        UseCurlButton           = true;                  // - If set to true, Sonic can roll(curl) while in mid air.
        UsePeelout              = global.UsePeelout;     // - If set to true, Sonic can perform the Super Peelout.
        UseWallJump             = true;                  // - N/A

        FlagRollSpeedCap        = true;                  // - If set to true speed is capped at 16 when rolling.

        CameraLag               = true;

        AngleSensorHeight       = 90;                    // - Maximum distance the angle checking sensors can move.
        AngleSensorWidth        = 6;
        GroundSensorHeight      = 36;                    // - Maximum distance the ground checking sensors can move.
        GroundSensorHeightMin   = 30;                    // - Maximum distance the ground checking sensors can move.

        Sounds3D_Ring           = false;                 // - Use 3D sounds for Rings(CPU intensive).
        RingStereoMix           = false;                 // - If set to true the ring sound effect will play on both left and right channels, otherwise it'll switch between the two.
   
        SpeedMultiplier         = 1;
        SplitSpeedAmount        = 4;  

    // ---- Key data --------------------------------------------------------------------
        InputAlarm              = 0;
        
        LookTimer               = 0;
        
        KeyLeft                 = false;   
        KeyRight                = false;   
        KeyUp                   = false;   
        KeyDown                 = false;  
    
        KeyA                    = false;   
        KeyB                    = false; 
        KeyC                    = false; 
    
        KeyLeftPressed          = false;   
        KeyRightPressed         = false;   
        KeyUpPressed            = false;   
        KeyDownPressed          = false;  
    
        KeyAPressed             = false;   
        KeyBPressed             = false;  
        KeyCPressed             = false;  
        
        KeySPressed             = false;
        InputIdleTimer          = 0;

        if(PlayerId == 1)
            Delay = true;
        else
            Delay = false;
       
    // ---- Animation data --------------------------------------------------------------------
        AnimationX              = x;
        AnimationY              = y;
        AnimationAngle          = 0;
        Animation               = "Idle";
        AnimationPrevious       = "Idle";
        AnimationRepeats        = 0;
        AnimationTotalFrames    = 0;
        AnimationTimer          = 0;
        AnimationLength         = -1;
        JumpAnimSpeed           = 1;
        
        CurrentPalette          = 0;
        switch(CharacterId){
            case consCharacterSonic:
                SuperPalette            = sprS2SuperSonicPalette;
                HyperPalette            = sprS2HyperSonicPalette;
                DeformPalette           = sprS2SonicTransformPalette;
                break;
        }

        image_speed             = 0;
        
        ShieldAnimation         = 0;

// ==== Misc. ============================================================================

    if((objGlobal.RecordingMode == consRecordPlay || objGlobal.RecordingMode == consRecordRec) &amp;&amp; PlayerId == 0){
        scrRecordInit(objGlobal.RecordingMode, objGlobal.RecordingFile[PlayerId], scrRecordRecEnd);
        Recording = true;
    }else
        Recording = false;  

    if(objGlobal.Cutscene == true)
        Cutscene = true;
    else
        Cutscene = false;

    AllowAnim     = true;
    AllowAction   = true;
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animations</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    scrReloadAnimations(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Trail</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    // ---- Variables ------------------------------------------------------------
    
    // ---- Code -----------------------------------------------------------------
    // Allocate vertexes list
    VertexX1 = ds_list_create();
    VertexY1 = ds_list_create();
    VertexX2 = ds_list_create();
    VertexY2 = ds_list_create();

    repeat(20){
        ds_list_add(VertexX1, x); 
        ds_list_add(VertexY1, y); 
        ds_list_add(VertexX2, x); 
        ds_list_add(VertexY2, y); 
    }
    // Allocate other variables
    TrailAngle = 0;

    // ---- Boost barrier color --------------------------------------------------
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Angles</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    i = 0;
    repeat(360){
        Sin[i] = dsin(i);
        Cos[i] = dcos(i);
        i++;
    }

    AnglePos[0,0] = x-7;
    AnglePos[0,1] = y+20;

    AnglePos[1,0] = x+7;
    AnglePos[1,1] = y+20;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    DebugPos   = 0;
    DebugType  = 0;

    DebugList = ds_list_create();
    ds_list_add(DebugList, objRing);
    ds_list_add(DebugList, objMonitor);
    ds_list_add(DebugList, objCheckpoint);
    ds_list_add(DebugList, objYellowSpring);
    ds_list_add(DebugList, objYellowSpringCorner);
    ds_list_add(DebugList, objRedSpring);
    ds_list_add(DebugList, objRedSpringCorner);
    ds_list_add(DebugList, objSpike);
    ds_list_add(DebugList, objChaosEmerald);
    with(objParentEnemy){
        if(ds_list_find_index(other.DebugList, object_index) != -1)
            continue;
        ds_list_add(other.DebugList, object_index); 
    }with(objParentLevelObject){
        if(ds_list_find_index(other.DebugList, object_index) != -1)
            continue;
        ds_list_add(other.DebugList, object_index);   
    }with(objParentGimmick){
        if(ds_list_find_index(other.DebugList, object_index) != -1)
            continue;
        ds_list_add(other.DebugList, object_index);   
    }  
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animation Handle</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(Action != consActionDebug){             
        if(Layer == 0)
            instance_activate_object(objParentLayer1);
        else if(Layer == 1)
            instance_activate_object(objParentLayer0);
    
            
        if(instance_exists(TerrainId) == false)
            TerrainId = noone;
    
       
        if((Speed &lt;= 0 || Ground == false)&amp;&amp; KeyLeft &amp;&amp; InputAlarm &lt;= 0 &amp;&amp;(Action == consActionNormal || Action == consActionSpring || Action == consActionFly 
        || Action == consActionJumping || Action == consActionQuicksand))
            image_xscale = -1;
        if((Speed &gt;= 0 || Ground == false) &amp;&amp; KeyRight &amp;&amp; InputAlarm &lt;= 0 &amp;&amp;(Action == consActionNormal || Action == consActionSpring || Action == consActionFly 
        || Action == consActionJumping || Action == consActionQuicksand))
            image_xscale = 1;
        if(CharacterId == consCharacterKnuckles){
            if(LeftEdge &lt; 10 &amp;&amp;(Animation == "Balance" || Animation == "Balance2" || Animation == "Balance3"))
                image_xscale = -1;
            if(RightEdge &lt; 10 &amp;&amp;(Animation == "Balance" || Animation == "Balance2" || Animation == "Balance3"))
                image_xscale = 1;
        }
        
        if(scrPlayerCollisionBSensor(objParentTerrain, 0) == false &amp;&amp; Ground == true){
            if(AngleMode == 0)
                RightEdge = TerrainId.bbox_right-(x-10);
            else if(AngleMode == 1)
                RightEdge = abs(TerrainId.bbox_top-(y+10));
            else if(AngleMode == 2)
                RightEdge = abs(TerrainId.bbox_left-(x+10));
            else if(AngleMode == 3)
                RightEdge = TerrainId.bbox_bottom-(y-10);
        }else{
            RightEdge = 30;
        }
        if(scrPlayerCollisionASensor(objParentTerrain, 0) == false &amp;&amp; Ground == true){
            if(AngleMode == 0)
                LeftEdge = abs(TerrainId.bbox_left-(x+10));
            else if(AngleMode == 1)
                LeftEdge = abs(TerrainId.bbox_bottom-(y-10));
            else if(AngleMode == 2)
                LeftEdge = abs(TerrainId.bbox_right-(x-10));
            else if(AngleMode == 3)
                LeftEdge = abs(TerrainId.bbox_top-(y+10));
        }else{
            LeftEdge = 30;
        }
            
        if(Cutscene == false || AllowAnim == true)       
            scrAnimationsHandle();
        
       // AnimationX = floor(x);        
       // AnimationY = floor(y);
        //if(abs(Sin[Angle]) &gt;= 0.1 &amp;&amp; abs(Sin[Angle]) &lt;= 0.9){
        _Cos = abs(Cos[Angle]);
        if(_Cos &gt; 0.5)
            _Cos = 1-_Cos;
        _Sin = abs(Sin[Angle]);
        if(_Sin &gt; 0.5)
            _Sin = 1-_Sin;
        AnimationX = floor(x+_Cos*4);
        AnimationY = floor(y+_Sin*4);
       // }
        switch(Animation){  
            case "Rolling":
                AnimationAngle = 0;
                if(Action != consActionPipe){
                    AnimationX  = floor(x)+(5*Sin[Angle]);
                    AnimationY  = floor(y)+(5*Cos[Angle]);
                }
                break;          
            case "Idle":
            case "Hurt":
            case "CrouchDown":
            case "LookUp":
            case "Pushing":
            case "OuttaHere":
                AnimationAngle = 0;
                break;
            case "Spindash":
                AnimationAngle = 0;
                if(Action != consActionPipe){
                    AnimationX  = floor(x)+(7*Sin[Angle]);
                    AnimationY  = floor(y)+(7*Cos[Angle]);
                }
                break;       
            default: 
                if(Ground == true){
                    if(Landed == false){
                        if(abs(Angle-AnimationAngle) &lt; 35) 
                            AnimationAngle = scrRotateTowardsAngle(AnimationAngle, Angle, max(1, abs(Speed)));
                        else                              
                            AnimationAngle = Angle;
                    }else 
                        AnimationAngle = Angle;
                }else 
                    AnimationAngle = scrRotateTowardsAngle(AnimationAngle, 0, 4);
                break;
        }
    
        if(Use360SpriteRotation == true){
            if(UseWorldsRotation == false || abs(angle_difference(0, AnimationAngle)) &gt; 45)
            image_angle = AnimationAngle;
        }else{  
            if(Landed == true)
                image_angle = round(Angle/45)*45;  
       
            if(Ground == true &amp;&amp; Animation != "Spindash" &amp;&amp; Animation != "Rolling" &amp;&amp; Animation != "Hurt"){
                if(Angle &lt;= 180)   
                    image_angle = scrWrapAngle(floor(Angle/90)*90);   
                else if(Angle &gt; 180)   
                    image_angle = scrWrapAngle(ceil(Angle/90)*90);
                if(angle_difference(image_angle, Angle) == 180 || angle_difference(image_angle, Angle) == -180){
                    image_angle -= 180;
                }
    
                if(angle_difference(image_angle, Angle) &lt; -40)
                    image_angle += 45;
                if(angle_difference(image_angle, Angle) &gt; 40)
                    image_angle -= 45;           
            }else
                image_angle = round(scrRotateTowardsAngle(AnimationAngle, 0, 4)/45)*45;   
    
            if(Animation == "Spindash" || Animation == "Rolling" || Animation == "Hurt" || Animation == "Idle" || Animation == "CrouchDown" 
            || Animation == "LookUp" || Animation == "OuttaHere" || Animation == "Pushing")
                image_angle = 0;
        }
       // --------------------------------------------------------------
    
        AnimationValue   = scrAnimationSystemFindValue(Animation);  
        if(AnimationPrevious != Animation){
            AnimationRepeats        = 0;
            image_index             = 0;
            AnimationTimer = ds_grid_get(Animations, consAnimationsTime, AnimationValue);  
            if(Animation != "IdleWait0" &amp;&amp; Animation != "IdleWait1" &amp;&amp; Animation != "IdleWait2" &amp;&amp; Animation != "Blink" &amp;&amp; Animation != "IdleWait3" 
            &amp;&amp;(CharacterId != consCharacterTails || Animation != "Idle"))
                AnimationTotalFrames    = 0;
        }
        AnimationLength   = ds_grid_get(Animations, consAnimationsTime, AnimationValue);  
        sprite_index    = ds_grid_get(Animations, consAnimationsSprite, AnimationValue);
        if((Animation != "Running" &amp;&amp; Animation != "Fly" &amp;&amp; Animation != "Walking" &amp;&amp; (Action != consActionCorkscrew) &amp;&amp;((Action != consActionRolling &amp;&amp;(Action != consActionJumping)) || CharacterId == consCharacterTails)&amp;&amp; Animation != "Corkscrew")||(Action == consActionSpring &amp;&amp; Animation == "Walking"))
            image_index     += ds_grid_get(Animations, consAnimationsSpeed, AnimationValue);
        else if(Action == consActionSpring &amp;&amp; Animation == "Corkscrew")
            image_index     += 0.35;
        else if(Animation == "Running" || Animation == "Walking")
            image_index     += 1/max(8-abs(Speed), 1);
        else if(Action == consActionRolling ||(Action == consActionCorkscrew &amp;&amp; Animation == "Rolling"))
            image_index     += 1/max((5-abs(Speed)), 1);
        else if(Action == consActionJumping)
            image_index     += JumpAnimSpeed;
        else if(Animation == "Fly"){
            if(Gravity &gt; 0)
                image_index     += 0.75;
            else
                image_index     += 1;
        }
    
        if(AnimationTimer &gt; 0 &amp;&amp; AnimationLength &gt; 0){
            AnimationTimer -= 1;
        }   
        AnimationPrevious = Animation;
        if(image_index &gt;= image_number ||(AnimationLength &gt; 0 &amp;&amp; AnimationTimer &lt;= 0)){
            AnimationRepeats += 1;
            image_index = ds_grid_get(Animations, consAnimationsLoop, AnimationValue);
            if(AnimationRepeats &gt;= ds_grid_get(Animations, consAnimationsRepeat, AnimationValue) &amp;&amp; Animation != ds_grid_get(Animations, consAnimationsEndAnim, AnimationValue)){
                Animation           = ds_grid_get(Animations, consAnimationsEndAnim, AnimationValue);
                //Value               = 
                sprite_index        = ds_grid_get(Animations, consAnimationsSprite, scrAnimationSystemFindValue(Animation));
                image_index         = 0;
                AnimationRepeats    = 0;
            }
        }
        
        if(Invincibility == 1 &amp;&amp; InvincibilityTimer mod 4 == 0)
            image_alpha = !image_alpha;
        else if(Invincibility != 1)
            image_alpha = 1;
        
    }    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Dead</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(Action == consActionDead){
        Gravity += 0.21875;
        y += Gravity;
        if(y &gt;= view_yview[0]+view_hview[0]+900 &amp;&amp; audio_is_playing(sndGameOver) == false){
            if(global.CPUPlayer[PlayerId] == false){
                if(global.Lives &gt; 0){
                    room_restart();                
                }else
                    scrGameOver();
            }else{
                depth   = -19;
                x       = global.Player[0].x;
                y       = global.Player[0].y;
                Action  = consActionNormal;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Handle Camera</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(CameraLock == false){  
        Camera.x = floor(AnimationX);
        if(Action == consActionCrouchDown){
            LookTimer += 1;
            if(LookTimer &gt;= 120){
                Camera.y = min(Camera.y+2, floor(y)+88)
            }else{
                if(Camera.y &lt; floor(y))
                    Camera.y = min(Camera.y+2, floor(y));
                if(Camera.y &lt; floor(y))
                    Camera.y = max(Camera.y-2, floor(y)); 
            }
        }else if(Action == consActionLookUp){
            LookTimer += 1;
            if(LookTimer &gt;= 120){
                Camera.y = max(Camera.y-2, floor(y)-104)
            }else{
                if(Camera.y &lt; floor(y))
                    Camera.y = min(Camera.y+2, floor(y));
                if(Camera.y &lt; floor(y))
                    Camera.y = max(Camera.y-2, floor(y)); 
            }
        }else{
            if(LookTimer &gt;= 120){
                if(Camera.y &lt; floor(y))
                    Camera.y = min(Camera.y+2, floor(y));
                else if(Camera.y &gt; floor(y))
                    Camera.y = max(Camera.y-2, floor(y)); 
                else
                    LookTimer = 0;
            }else
                Camera.y    = floor(AnimationY);
        }
    }
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input Management

    if(Recording == true){
        scrRecordStep(objGlobal.RecordingMode);
    }  
  
    Landed                  = false;
    if(Action == consActionDead){
        depth = -9000;
        exit;
    }
    if(Recording == true &amp;&amp; objGlobal.RecordingMode == consRecordPlay){
        scrRecordInputPlay();
        
    }else if(Delay == false &amp;&amp;(instance_exists(objResults) == false || instance_exists(objCapsule) == true) &amp;&amp;(Recording == false || objGlobal.RecordingMode == consRecordRec) &amp;&amp; Cutscene == false){    
        KeyLeft                 = false;   
        KeyRight                = false;   
        KeyUp                   = false;   
        KeyDown                 = false;  
    
        KeyA                    = false;   
        KeyB                    = false; 
        KeyC                    = false; 
    
        KeyLeftPressed          = false;   
        KeyRightPressed         = false;   
        KeyUpPressed            = false;   
        KeyDownPressed          = false;  
    
        KeyAPressed             = false;   
        KeyBPressed             = false;  
        KeyCPressed             = false;  

        if(InputAlarm &lt;= 0){
            KeyLeft                 = keyboard_check(global.InputLeft);   
            KeyRight                = keyboard_check(global.InputRight);   
        }
        KeyLeftPressed          = keyboard_check_pressed(global.InputLeft);   
        KeyRightPressed         = keyboard_check_pressed(global.InputRight); 
    
        KeyUp                   = keyboard_check(global.InputUp);   
        KeyDown                 = keyboard_check(global.InputDown);  
    
        KeyA                    = keyboard_check(global.InputA);   
        KeyB                    = keyboard_check(global.InputB);
        KeyC                    = keyboard_check(global.InputC);
      
        KeyUpPressed            = keyboard_check_pressed(global.InputUp);   
        KeyDownPressed          = keyboard_check_pressed(global.InputDown);  
    
        KeyAPressed             = keyboard_check_pressed(global.InputA);   
        KeyBPressed             = keyboard_check_pressed(global.InputB);   
        KeyCPressed             = keyboard_check_pressed(global.InputC);  
        KeySPressed             = keyboard_check_pressed(global.InputSuper);    
    
        if((KeyLeft &amp;&amp; KeyRight) ||(KeyLeftPressed &amp;&amp; KeyRightPressed)){
            KeyLeft             = false;
            KeyRight            = false;
        
            KeyLeftPressed      = false;
            KeyRightPressed     = false;
        } 
    }else if((instance_exists(objResults) == false || instance_exists(objCapsule) == true) &amp;&amp; Cutscene == false){
        FirstPlayer = global.Player[0];
        if((x &lt; FirstPlayer.x-10 ||(FirstPlayer.y &lt; y-50 &amp;&amp; FirstPlayer.Ground == true &amp;&amp; FirstPlayer.Speed &gt; 0))
            &amp;&amp; (FirstPlayer.y &gt;= y-50 || FirstPlayer.Ground == false || FirstPlayer.Speed &gt;= 0))
            KeyRight = true;
        else
            KeyRight = false;
        if((x &gt; FirstPlayer.x+10 ||(FirstPlayer.y &lt; y-50 &amp;&amp; FirstPlayer.Ground == true &amp;&amp; FirstPlayer.Speed &lt; 0))
            &amp;&amp; (FirstPlayer.y &gt;= y-50 || FirstPlayer.Ground == false || FirstPlayer.Speed &lt;= 0))
            KeyLeft = true;
        else
            KeyLeft = false;
        if(Ground == true &amp;&amp; FirstPlayer.y &lt; y-50 &amp;&amp; FirstPlayer.Ground == false)
            KeyAPressed = true;
        else
            KeyAPressed = false;
        if(Action = consActionJumping){
            KeyA    = true;
        }else{
            KeyA    = false;
        }
            if(x &lt; view_xview[0]-50){
                x = view_xview[0]-30;
                y = view_yview[0]-30;
                Action = consActionFlyCPU;
            }
            if(x &gt; view_xview[0]+view_wview[0]+50){
                x = view_xview[0]+view_wview[0]+30;
                y = view_yview[0]-30;
                Action = consActionFlyCPU;
            }
    }else if(instance_exists(objResults) == true &amp;&amp; instance_exists(objCapsule) == false &amp;&amp; Cutscene == false){
        KeyRight        = true;
        KeyLeft         = false;
        KeyUp           = false;
        KeyA            = false;
        KeyB            = false;
        KeyC            = false;
        KeySPressed     = false;
        KeyDown         = false;
        KeyDownPressed  = false;
        if(Action == consActionCrouchDown || Action == consActionSpindash || Action == consActionRolling || Action == consActionLookUp){
            Action = consActionNormal;
        }
    }
    if(Recording == true &amp;&amp; objGlobal.RecordingMode == consRecordRec){
        scrRecordInputRec();
    }    

    if(KeyLeft == false &amp;&amp; KeyRight == false &amp;&amp; KeyA == false &amp;&amp; KeyUp == false &amp;&amp; KeyDown == false &amp;&amp; Action == consActionNormal)
        InputIdleTimer++;
    else
        InputIdleTimer = 0;

    if(InputIdleTimer &gt; 10200 &amp;&amp; CharacterId == consCharacterSonic &amp;&amp; Action != consActionOuttaHere){
        audio_play_sound(sndSonicOuttaHere, 1, false);
        Action = consActionOuttaHere;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timers


    if(Invincibility &gt; 0){
        InvincibilityTimer -= 1;
        if(InvincibilityTimer mod 8 == 0 &amp;&amp; Invincibility == 2 &amp;&amp; SuperForm == false){
            InvAngle = scrWrapAngle(InvAngle+45);
            X = global.Cos[InvAngle]*16;
            Y = global.Sin[InvAngle]*16;
            instance_create(x+X, y+Y, objInvSparkle)
            instance_create(x-X, y-Y, objInvSparkle)
        }
        
        //instance_create(x-X, y-Y, objInvSparkle);
        if(InvincibilityTimer &lt;= 0){
            if(audio_is_playing(sndInvincibility) &amp;&amp; Invincibility == 2){
                audio_stop_sound(sndInvincibility);
                global.CurrentSong = ds_map_find_value(LvlMusic, room);
                audio_resume_sound(global.CurrentSong);
            }
            
            Invincibility = 0;
        }
    }
    if(SpeedSneakers == true){
        SpeedSneakersTimer -= 1;
        if(SpeedSneakersTimer &lt;= 0){
            if(audio_is_playing(sndSpeedSneakers)){
                audio_stop_sound(sndSpeedSneakers);
                global.CurrentSong = ds_map_find_value(LvlMusic, room);
                audio_resume_sound(global.CurrentSong);
            }
            SpeedSneakers = false;
        }
    }

    if(SuperForm){
        SuperFormTimer += 1;
        if(HyperForm == false)
            CurrentPalette += 0.1;
        else{
            CurrentPalette += 0.3;
            if(global.Frame mod 10){
                InvAngle = scrWrapAngle(InvAngle+45);
               // X = global.Cos[InvAngle]*16;
                //Y = global.Sin[InvAngle]*16;
                Ins = instance_create(x, y, objHyperSparkle);
                Ins.Angle = InvAngle;
                //instance_create(x-X, y-Y, objHyperSparkle)
            }
        }
        if((CurrentPalette &gt; sprite_get_number(SuperPalette)-1 &amp;&amp; HyperForm == false)||(CurrentPalette &gt; sprite_get_number(HyperPalette)-1 &amp;&amp; HyperForm == true))
            CurrentPalette = 0;
        if(SuperFormTimer mod 60 == 0){
            global.Rings -= 1;
            if(global.Rings == 0){
                scrPlayerDeform();
            }
        }
    }
    if(Deform == true){
        CurrentPalette -= 0.4;
        if(CurrentPalette &lt; 0)
            Deform = false;
    }
    if(ShieldUsable == false &amp;&amp; Action != consActionJumping){
        ShieldUsable = true;
        ShieldAction = false;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Physics/Water

    
    if(instance_exists(objWater)){
        if(y &gt; objWater.y &amp;&amp; Underwater == false &amp;&amp; Action != consActionPipe &amp;&amp; (Gravity &gt; 0 || Ground == true)){
            Gravity     *= 0.25;
            Speed       *= 0.5;
            Underwater   = true;
            if(Shield == consShieldElectric || Shield == consShieldFire)
                Shield = 0;
            if(Action == consActionFly)
                audio_stop_sound(sndFly); 
            instance_create(x, objWater.y, objSplash);
        }else if(y &lt; objWater.y &amp;&amp; Underwater == true &amp;&amp; Action != consActionPipe &amp;&amp; (Gravity &lt; 0 || Ground == true)){
            Gravity     *= 2;
            Underwater   = false;
            instance_create(x, objWater.y, objSplash);
            if(audio_is_playing(sndDrowning) &amp;&amp; PlayerId == 0){
                audio_stop_sound(sndDrowning);
                audio_resume_sound(ds_map_find_value(LvlMusic, room));
            }
            if(Action == consActionFly)
                audio_play_sound(sndFly, 1, true);
        }
        if(Action == consActionPipe){
            if(audio_is_playing(sndDrowning) &amp;&amp; PlayerId == 0){
                audio_stop_sound(sndDrowning);
                audio_resume_sound(ds_map_find_value(LvlMusic, room));
            }
            Underwater = false;   
        }
    }

        
    if(Underwater == false){
      // _______________________________
      // ----- NORMAL ------------------
      // _______________________________    

    

        UnderwaterTimer = 1800;

        if(Action != consActionFly)
            GravityRate = 0.21875; 
        
        JumpRelease = JumpReleaseValue;   
      
        if(SuperForm == false || SpeedSneakers == true){
            JumpHeight   = JumpValue;
            SkidRate     = 0.5;
        }

        if(SpeedSneakers == false){  

          // _________________________________________
          // ----- NORMAL(No Shoes) ------------------
          // _________________________________________   

            if(SuperForm == false){  
              // _________________________________________________
              // ----- NORMAL(No Shoes, Normal) ------------------
              // _________________________________________________  

                Acceleration = AccelRate;
                if(Action != consActionFly)
                    TopSpeed = 6;
                RollingFriction = 0.0234375; 

              //--------------------------------------------------------
            }else{
              // ________________________________________________
              // ----- NORMAL(No Shoes, Super) ------------------
              // ________________________________________________  

                JumpHeight          = -8;
                SkidRate            = 1;
                if(Action != consActionFly)
                    TopSpeed            = 10;
                RollingFriction     = 0.09375;
                Acceleration = AccelRate*4;
              //--------------------------------------------------------
            } 
           //=======================================================
        }else if(SpeedSneakers == true){    
          // _________________________________________________
          // ----- NORMAL(Speed Shoes) ------------------
          // _________________________________________________  
            Acceleration = AccelRate*2;
            if(Action != consActionFly)
                TopSpeed = 12;
            RollingFriction = 0.046875; 
          //--------------------------------------------------------
        }
    }else{          
      // _______________________________
      // ----- UNDERWATER --------------
      // _______________________________

        JumpHeight      = JumpValueWater;
        JumpRelease     = JumpReleaseWater; 
        //--------------------------------------------------------
        if(Action != consActionFly)
            GravityRate = 0.0625;

        if(Shield == consShieldElectric || Shield == consShieldFire)
            Shield = 0;

        //--------------------------------------------------------
        if(SuperForm == false){      
          // ____________________________________________
          // ----- UNDERWATER(Normal form) --------------
          // ____________________________________________

            if(Action != consActionFly)
                TopSpeed = 3;
            
            Acceleration       = AccelRate/2;                
            RollingFriction    = 0.01171875;             
            SkidRate           = 0.25;
          //--------------------------------------------------------
        }else{
          // ___________________________________________
          // ----- UNDERWATER(Super Form) --------------
          // ___________________________________________

            if(Action != consActionFly)
                TopSpeed = 5;
            
            Acceleration      = AccelRate*2;
            RollingFriction   = 0.046875; 
            SkidRate          = 0.5; 
          //-------------------------------------------------------- 
        }
        //=============================================================   

   
    //=============================================================
    // -------- UNDERWATER HANDLE ---------------------
    //=============================================================


        if(Shield != consShieldWater &amp;&amp; Action != consActionPipe)
            UnderwaterTimer -= 1;
        else
            UnderwaterTimer = 1800;
        
        if(UnderwaterTimer &lt; 720 &amp;&amp; audio_is_playing(sndDrowning) == false &amp;&amp; UnderwaterTimer &gt; 500 &amp;&amp; PlayerId == 0){
            audio_play_sound(sndDrowning, 1, false);
            audio_pause_sound(ds_map_find_value(LvlMusic, room));
        }else if(UnderwaterTimer &gt;= 720 &amp;&amp; audio_is_playing(sndDrowning) == true &amp;&amp; PlayerId == 0){
            audio_stop_sound(sndDrowning);
            audio_resume_sound(ds_map_find_value(LvlMusic, room));
        }
        if(UnderwaterTimer == 0){
            Action = consActionDead;
            if(PlayerId == 0)
                audio_stop_sound(sndDrowning);
            audio_play_sound(sndPlayerDrown, 1, false);
            Speed              = 0;
            Gravity            = 0;
            CameraLock         = true;
            Camera.CameraLock  = true;
        }        
    }
       
 //=============================================================
    if(Ground == false &amp;&amp; Action != consActionFly){
        Acceleration *= 2;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input Management
// -------------------------------- INPUT MANAGEMENT -------------------------------------


    // -- Exit step event if player is dead. --
    if(Action == consActionDead)
        exit;


    // -- Deactivate opposite layer --
    if(Layer == 0)
        instance_deactivate_object(objParentLayer1);
    else if(Layer == 1)
        instance_deactivate_object(objParentLayer0);
       
    // -- Handle Slope Factor(Acceleration and Deceleration on slopes) --
    if(Ground == true &amp;&amp; Action != consActionRolling &amp;&amp; Action != consActionPipe &amp;&amp; Action != consActionCrouchDown &amp;&amp; Action != consActionSpindash
    &amp;&amp; Action != consActionLookUp)
        Speed -= scrPlayerGetSlopeFactor()/SpeedMultiplier;               
    
    if(abs(Speed) &lt; 2 &amp;&amp; Shield == consShieldFire &amp;&amp; ShieldAction == true)
        ShieldAction = false;
     

    if(Action == consActionRolling){
        if(sign(Speed) == sign(global.Sin[Angle]))
            Speed -= (0.078125*global.Sin[Angle])/SpeedMultiplier;
        else
            Speed -= (0.3125*global.Sin[Angle])/SpeedMultiplier;
        
    }

    // -- Accelerate when holding LEFT/RIGHT keys, and decelerate when hold neither. --
    if(InputAlarm &lt;= 0 &amp;&amp; ShieldAction == false &amp;&amp; (Action == consActionNormal ||(Action == consActionCorkscrew &amp;&amp; Animation != "Rolling")||(Action == consActionJumping &amp;&amp;(JumpVariable &gt;= 0 || RollJumpLock == false))
    || Action == consActionFly || Action == consActionSpring)){
        if(KeyLeft &amp;&amp; Speed &gt; -TopSpeed)
            Speed = max(Speed-Acceleration*SpeedMultiplier, -TopSpeed);            
        else if(KeyRight &amp;&amp; Speed &lt; TopSpeed)
            Speed = min(Speed+Acceleration*SpeedMultiplier, TopSpeed);

        if(KeyRight == false &amp;&amp; KeyLeft == false &amp;&amp; Speed != 0 &amp;&amp;(Ground == true || Action == consActionCorkscrew))   
            Speed -= min(abs(Speed), Acceleration*SpeedMultiplier)*sign(Speed);
            
    }
    // -- Handle Input Alarm.
    if(InputAlarm &gt; 0 &amp;&amp;((Ground == true)|| InputAlarm &lt; 30)){        
        InputAlarm -= 1;
    }
    
    if(Homing){
        if(instance_exists(HomingIns) == true &amp;&amp; distance_to_object(HomingIns) &lt;= 100 &amp;&amp; Ground == false &amp;&amp; scrPlayerCollisionSides() == false){
            Dir       = point_direction(x, y, HomingIns.x, HomingIns.y);
            Speed     = lengthdir_x(10, Dir);
            Gravity   = lengthdir_y(10, Dir);
        }else{
            Homing = false;
        }
    }
        
    if(FlagsAllowXMovement == true){
        scrPlayerHandleBreakableTerrain();
        scrPlayerWallCollision();
    }
        
   
    if(x &lt;= objController.CameraMinX+16){
        x = objController.CameraMinX+16;
        if(Speed &lt; 0)
            Speed = 0;
    }else if(x &gt;= objController.CameraMaxX-16){
        x = objController.CameraMaxX-16;
        if(Speed &gt; 0)
            Speed = 0;
    }
   
        
    if(FlagsAllowXMovement == true)
        scrPlayerSpeedMovement();   
    
        //scrPlayerHandleMonitors();
        
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement    
    if(Action == consActionDead)
        exit;
        
    if(FlagsAllowYMovement == true){
        scrPlayerHandleBreakableTerrain(); 
        
        if(Ground == false){   
            // - Air Friction -------
            if(Gravity &lt; 0 &amp;&amp; Gravity &gt; -4 &amp;&amp; Ground == false)
                Speed -= (Speed/0.125)/256;  
           
            scrPlayerGravityMovement();
;
            if(Ground == false &amp;&amp; Action != consActionGlide &amp;&amp; Action != consActionClimb &amp;&amp; Action != consActionClimbRise &amp;&amp; Action != consActionTransform
            &amp;&amp; Action != consActionGrab &amp;&amp; Action != consActionQuicksand) 
                Gravity += GravityRate*SpeedMultiplier;        
        }
    }

 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Object Handle

    if(FlagsAllowObjectHandle){
        scrPlayerHandleRings();
        scrPlayerHandleSprings();
        scrPlayerHandleBumpers();
        scrPlayerHandleBalloons();
        scrPlayerHandleDashers();
        scrPlayerHandleSpikes();
        scrPlayerHandleEnemies();
        scrPlayerHandleMonitors();
        scrPlayerHandlePipes();
        scrPlayerHandleBreakableTerrain();
        scrPlayerHandleCheckpoint();
        scrPlayerHandleBubbles();
        scrPlayerHandleHarmful();
        scrPlayerHandleCollapsingPlatforms();
        scrPlayerHandleSignpost();
        scrPlayerHandleChaosEmeralds();
        scrPlayerHandleGrabPoles();
        scrPlayerHandleCorkscrews();
        scrPlayerHandleQuicksand();
        scrPlayerHandleLayers();
        scrPlayerHandleConveyers();
        scrPlayerHandleMisc();
        scrPlayerHandleCutscenes();
    }      
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Actions

    
    if(Cutscene == false || AllowAction == true){   
        switch(Action){
            case consActionNormal:
                scrPlayerActionNormal();
                break;
            case consActionJumping:
                scrPlayerActionJumping();
                break;    
            case consActionRolling:
                scrPlayerActionRolling();
                break;  
            case consActionCrouchDown:
                scrPlayerActionCrouchDown();
                break; 
            case consActionSpindash:
                scrPlayerActionSpindash();
                break; 
            case consActionSpring:
                scrPlayerActionSpring();
                break; 
            case consActionSkid:
                scrPlayerActionSkid();
                break;
            case consActionPush:
                scrPlayerActionPushing();
                break;
            case consActionHurt:
                scrPlayerActionHurt();
                break;
            case consActionLookUp:
                scrPlayerActionLookUp();
                break;
            case consActionPipe:
                scrPlayerActionPipe();
                break;
            case consActionFly:
                scrPlayerActionFly();
                break;
            case consActionFlyCPU:
                scrPlayerActionFlyCPU();
                break;
            case consActionGlide:
                scrPlayerActionGlide();
                break;
            case consActionGlideFall:
                scrPlayerActionGlideFall();
                break;
            case consActionGlideSlide:
                scrPlayerActionGlideSlide();
                break;
            case consActionClimb:
                scrPlayerActionClimb();
                break;
            case consActionClimbRise:
                scrPlayerActionClimbRise();
                break;
            case consActionTransform:
                scrPlayerActionTransform();
                break;
            case consActionGrab:
                scrPlayerActionGrab();
                break;
            case consActionGrabFall:
                scrPlayerActionGrabFall();
                break;
            case consActionCorkscrew:
                scrPlayerActionCorkscrew();
                break;
            case consActionQuicksand:
                scrPlayerActionQuicksand();
                break;
            case consActionPeelout:
                scrPlayerActionPeelout();
                break;
            case consActionSlide:
                scrPlayerActionSlide();
                break;
            case consActionOuttaHere:
                scrPlayerActionOuttaHere();
                break;
            case consActionDebug:
                scrPlayerActionDebug();
                break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc

    
    if(y &gt;= room_height ||(global.GameTime &gt;= 599000 &amp;&amp; DebugMode == false)){
        scrPlayerDead(sndPlayerDead);
    }
    
    
    if(Action != consActionFly &amp;&amp;(audio_is_playing(sndFly) || audio_is_playing(sndFlyFall))){
        audio_stop_sound(sndFly);
        audio_stop_sound(sndFlyFall);
    }
    
    if(Action != consActionFly){
        FlyTimer    = 480;
        FlyFlag     = 0;
    }

    if(Shield == consShieldInstashield &amp;&amp; ShieldAnimation &gt;= sprite_get_number(sprShieldInstashield)){
        Shield            = 0;   
        ShieldAnimation   = 0; 
    }


    // -------- Speed Cap -------------------
 
    if(scrPlayerCollisionSquish()){
        scrPlayerDead(sndPlayerDead);  
    }
    if(Layer == 0)
        instance_activate_object(objParentLayer1);
    else if(Layer == 1)
        instance_activate_object(objParentLayer0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trail(See Credits)

    // ---- Variables ------------------------------------------------------------
    if(TrailType &gt; 0){
            
        var _Angle, _i, _X1, _Y1, _X2, _Y2;
        _Angle = 0;
        
        for(_i=0; _i&lt;20; _i+=1){
            // Retrieve values
            _X1 = ds_list_find_value(VertexX1, _i);
            _X2 = ds_list_find_value(VertexX2, _i);
            _Y1 = ds_list_find_value(VertexY1, _i);
            _Y2 = ds_list_find_value(VertexY2, _i);
            
            //Replace with interpolated ones
            ds_list_replace(VertexX1, _i, scrLinearInterpolate(_X1, _X2, 0.02));
            ds_list_replace(VertexX2, _i, scrLinearInterpolate(_X2, _X1, 0.02));
            ds_list_replace(VertexY1, _i, scrLinearInterpolate(_Y1, _Y2, 0.02));
            ds_list_replace(VertexY2, _i, scrLinearInterpolate(_Y2, _Y1, 0.02)); 
        }
    
        // Discard lastest segment
        ds_list_delete(VertexX1, 0);
        ds_list_delete(VertexX2, 0);
        ds_list_delete(VertexY1, 0);
        ds_list_delete(VertexY2, 0); 
        
        
            
    // ---------------------------------------------------------------------------------------- //          
        
        // Make the trail positions smaller
        if(Animation == "Rolling" &amp;&amp; Action != consActionPipe &amp;&amp;(x != xprevious || y != yprevious)){
            // Calculate angle from previous position to current to add a new trail segment
            TrailAngle = degtorad(point_direction(x, y, xprevious, yprevious)+90);
            ds_list_add(VertexX1, x-cos(TrailAngle)*12)
            ds_list_add(VertexX2, x+cos(TrailAngle)*12);
            ds_list_add(abs(VertexY1), y+sin(TrailAngle)*10);
            ds_list_add(abs(VertexY2), y-sin(TrailAngle)*10);
        }else{
            // Retrieve last values
            _X1 = ds_list_find_value(VertexX1, 18);
            _X2 = ds_list_find_value(VertexX2, 18);
            _Y1 = ds_list_find_value(VertexY1, 18);
            _Y2 = ds_list_find_value(VertexY2, 18);
    
            // Update using last values
            ds_list_add(VertexX1, _X1)
            ds_list_add(VertexX2, _X2);
            ds_list_add(VertexY1, _Y1);
            ds_list_add(VertexY2, _Y2);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Listener(Unused)

    if(PlayerId == 0){
       // audio_listener_position(x, y, 0);
        //audio_listener_velocity(Speed*global.Cos[Angle], Gravity*-global.Sin[Angle], 0);
        //audio_listener_orientation(x+global.Cos[Angle], y-global.Sin[Angle], 0, 0, 1, 0);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
    if(keyboard_check_pressed(ord("E")) &amp;&amp; SuperForm == true){
        HyperForm = true;   
    }
    if(KeyCPressed &amp;&amp; DebugMode){
        Action = consActionDebug;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animations</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    
    ds_grid_destroy(Animations);
    ds_list_destroy(DebugList);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recording

    if(Recording == true)
        scrRecordEnd(objGlobal.RecordingMode);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Listener</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(PlayerId == 0){
        //audio_listener_position(x, y, 0);
        //audio_listener_velocity(Speed*global.Cos[Angle], Gravity*-global.Sin[Angle], 0);
      //  audio_listener_orientation(x+global.Cos[Angle], y-global.Sin[Angle], 0, 0, 1, 0);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Trail</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(TrailType == 1){
        // ---- Variables ------------------------------------------------------------
        var _i, _Color;
        
        // ---- Code -----------------------------------------------------------------
        // Render trail
        draw_set_blend_mode(bm_add);
        draw_primitive_begin(pr_trianglestrip);
        switch(CharacterId){
            case consCharacterSonic:
                switch(SuperForm){
                    case false:
                        _Color = make_color_rgb(0, 72, 255);
                        break;
                    case true:
                        _Color = make_color_rgb(255,255,102);
                        break;
                }
                break;
                case consCharacterTails:
                    _Color = make_color_rgb(255, 255, 153);
                    break;
                case consCharacterKnuckles:
                    _Color = make_color_rgb(255, 0, 0);
                    break;
        }
        for (_i=0; _i&lt;19; _i+=1) {
            draw_vertex_color(ds_list_find_value(VertexX1, _i), ds_list_find_value(VertexY1, _i)+4, _Color, _i/24);
            draw_vertex_color(ds_list_find_value(VertexX2, _i), ds_list_find_value(VertexY2, _i)+4, _Color, _i/24);
        }
        draw_primitive_end();
        draw_set_blend_mode(bm_normal);
    }
    


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Tails</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(CharacterId == consCharacterTails){
        if(Animation == "Idle" || Animation == "CrouchDown" || Animation == "LookUp" || Animation == "Skid" || Animation == "Push"
        || Animation == "Blink" || Animation == "IdleWait0" || Animation == "IdleWait1" || Animation == "Grab"){
            draw_sprite_ext(sprS2TailsTail01, global.Frame/6, floor(x), floor(y), image_xscale, 1, image_angle, c_white, image_alpha);
        }
        if(Animation = "Rolling"){
            TailsAngle = point_direction(xprevious, yprevious, x, y);
            X = -14*global.Cos[TailsAngle];
            Y = 14*global.Sin[TailsAngle];
            X += (5*global.Sin[Angle])
            Y += (5*global.Cos[Angle])
            draw_sprite_ext(sprS2TailsTailRoll, global.Frame/3, floor(x+X), floor(y+Y), 1, 1, TailsAngle, c_white, image_alpha);
        }
        if(Animation = "Spindash"){
            TailsAngle = point_direction(xprevious, yprevious, x, y);
            X = -5*image_xscale;
            draw_sprite_ext(sprS2TailsTailRoll, global.Frame/3, floor(x+X), floor(y+10), image_xscale, 1, 0, c_white, image_alpha);
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animations</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    var Frame = global.Frame;    
    
    if(Shield == consShieldFire &amp;&amp; ShieldAction == false &amp;&amp;((SuperForm == false &amp;&amp; Invincibility &lt;= 1)|| ShowShieldsInv == true)){
        draw_sprite_ext(sprShieldFireBack, Frame/4, floor(AnimationX), floor(AnimationY), 1, 1, 0, c_white, 1);  
    }
        
    if(Shield == consShieldElectric &amp;&amp; 24-(floor(Frame/4) mod 24) &lt;= 8 &amp;&amp;((SuperForm == false &amp;&amp; Invincibility &lt;= 1)|| ShowShieldsInv == true)){
        draw_sprite_ext(sprShieldElectric, floor(Frame/4), floor(AnimationX), floor(AnimationY), 1, 1, image_angle, c_white, 1);  
    }

    // --- Draw Character ---
   

    if(SuperForm == true || Deform == true){
        draw_set_color(c_black);
        if(SuperForm == true){
            if(HyperForm == false)
                pal_swap_set(shdPaletteController, SuperPalette, floor(CurrentPalette));
            else{
                pal_swap_set(shdPaletteController, HyperPalette, floor(CurrentPalette));
                Dir = point_direction(x, y, xprevious, yprevious);
                
                if(Frame mod 2 == 0){
                    if(Frame mod 4 == 0)
                        Amount = 4;
                    else
                        Amount = 1.5;
                    draw_sprite_ext(sprite_index, image_index*SpeedMultiplier, floor(AnimationX)+(lengthdir_x(abs(x-xprevious)*Amount, Dir)), floor(AnimationY)+(lengthdir_y(abs(y-yprevious)*Amount, Dir)), image_xscale, 1, image_angle, image_blend, image_alpha); 
                }
            }
        }else
            pal_swap_set(shdPaletteController, DeformPalette, floor(CurrentPalette));
        draw_sprite_ext(sprite_index, image_index*SpeedMultiplier, floor(AnimationX), floor(AnimationY), image_xscale, 1, image_angle, image_blend, image_alpha);
        pal_swap_reset();   
        draw_set_color(c_white);
    }else{
        draw_sprite_ext(sprite_index, image_index*SpeedMultiplier, floor(AnimationX), floor(AnimationY), image_xscale, 1, image_angle, c_white, image_alpha);
    }

    if(Action == consActionSpindash &amp;&amp; Spindash != 2)
        draw_sprite_ext(sprSpindashDust, Frame/2, floor(AnimationX), floor(y), image_xscale, 1, 0, c_white, 1);
        
    if(Shield == consShieldNormal &amp;&amp;((SuperForm == false &amp;&amp; Invincibility &lt;= 1 &amp;&amp; Action != consActionTransform)|| ShowShieldsInv == true)){
        draw_sprite_ext(sprShieldNormal, Frame, floor(AnimationX), floor(AnimationY), 1, 1, 0, c_white, 1);  
    }
    if(Shield == consShieldElectric &amp;&amp; 24-(floor(Frame/4) mod 24) &gt; 8 &amp;&amp;((SuperForm == false &amp;&amp; Invincibility &lt;= 1 &amp;&amp; Action != consActionTransform)|| ShowShieldsInv == true)){
        draw_sprite_ext(sprShieldElectric, floor(Frame/4), floor(AnimationX), floor(AnimationY), 1, 1, 0, c_white, 1);  
    }
    if(Shield == consShieldInstashield &amp;&amp;((SuperForm == false &amp;&amp; Invincibility &lt;= 1 &amp;&amp; Action != consActionTransform)|| ShowShieldsInv == true)){
        draw_sprite_ext(sprShieldInstashield, floor(ShieldAnimation), floor(AnimationX), floor(AnimationY), image_xscale, 1, 0, c_white, 1);  
        ShieldAnimation += 1;
    }

    if(Shield == consShieldWater &amp;&amp;((SuperForm == false &amp;&amp; Invincibility &lt;= 1 &amp;&amp; Action != consActionTransform)|| ShowShieldsInv == true)){
        if(ShieldAction == false){
            draw_sprite_ext(sprShieldBubble, floor(Frame/4), floor(AnimationX), floor(AnimationY), 1, 1, 0, c_white, 1);  
            ShieldAnimation = 0;
        }else if(ShieldAction == true){
            draw_sprite_ext(sprShieldBubbleAction, ShieldAnimation, floor(AnimationX), floor(AnimationY), 1, 1, 0, c_white, 1);  
            ShieldAnimation = min(ShieldAnimation+0.5, 3);          
        }
    }
    if(Shield == consShieldFire &amp;&amp;((SuperForm == false &amp;&amp; Invincibility &lt;= 1 &amp;&amp; Action != consActionTransform)|| ShowShieldsInv == true)){
        if(ShieldAction == false){
            draw_sprite_ext(sprShieldFireFront, Frame/4, floor(AnimationX), floor(AnimationY), 1, 1, 0, c_white, 1);  
            ShieldAnimation = 0;
        }else if(ShieldAction == true){
            if(sign(Speed) != 0)
                draw_sprite_ext(sprShieldFireAction, ShieldAnimation, floor(AnimationX), floor(AnimationY), sign(Speed), 1, 0, c_white, 1);  
            else
                draw_sprite_ext(sprShieldFireAction, ShieldAnimation, floor(AnimationX), floor(AnimationY), image_xscale, 1, 0, c_white, 1);  
            ShieldAnimation += 0.5;    
        }
    }

   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug Mode</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(DebugMode == true){

        var DebugAngle;
        
        DebugAngle = AngleMode*90;
        
        // SENSOR A
        
        draw_set_colour(c_blue);
        
        X = x-(9*global.Cos[DebugAngle]);
        Y = y+(9*global.Sin[DebugAngle]);
        
        X2 = X+(20*global.Sin[DebugAngle]);
        Y2 = Y+(20*global.Cos[DebugAngle]);
        
        draw_line(X, Y, X2, Y2);
        
        // SENSOR B
        draw_set_colour(c_red);
        
        X = x+(9*global.Cos[DebugAngle]);
        Y = y-(9*global.Sin[DebugAngle]);
        
        X2 = X+(20*global.Sin[DebugAngle]);
        Y2 = Y+(20*global.Cos[DebugAngle]);
        
        draw_line(X, Y, X2, Y2);
        draw_set_colour(c_white);
        
         // SENSOR C
        
        draw_set_colour(c_yellow);
        
        X = x-(9*global.Cos[DebugAngle]);
        Y = y+(9*global.Sin[DebugAngle]);
        
        X2 = X-(20*global.Sin[DebugAngle]);
        Y2 = Y-(20*global.Cos[DebugAngle]);
        
        draw_line(X, Y, X2, Y2);
        
        // SENSOR D
        draw_set_colour(c_green);
        
        X = x+(9*global.Cos[DebugAngle]);
        Y = y-(9*global.Sin[DebugAngle]);
        
        X2 = X-(20*global.Sin[DebugAngle]);
        Y2 = Y-(20*global.Cos[DebugAngle]);
        
        draw_line(X, Y, X2, Y2);
        
        // SENSOR Left
        draw_set_colour(c_purple);
        
        X = x+(4*global.Sin[DebugAngle]);
        Y = y+(4*global.Cos[DebugAngle]);
        
        X2 = X-(11*global.Cos[DebugAngle]);
        Y2 = Y+(11*global.Sin[DebugAngle]);
        
        draw_line(X, Y, X2, Y2);
        
        // SENSOR Right
        draw_set_colour(c_aqua);
        
        X = x+(4*global.Sin[DebugAngle]);
        Y = y+(4*global.Cos[DebugAngle]);
        
        X2 = X+(11*global.Cos[DebugAngle]);
        Y2 = Y-(11*global.Sin[DebugAngle]);
        
        draw_line(X, Y, X2, Y2);
        draw_set_colour(c_orange);
        draw_circle(AnglePos[0, 0], AnglePos[0, 1], 3, false);
        draw_circle(AnglePos[1, 0], AnglePos[1, 1], 3, false);
        draw_set_colour(c_black);
        draw_set_font(fntDefault);
        draw_text(x, y-30, "Angle: "+string(Angle));
        draw_text(x, y-50, "Speed: "+string(Speed));
        draw_text(x, y-70, "Gravity: "+string(Gravity));
        draw_set_colour(c_white);
    }    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    if(DebugMode == true){
        Angle360Detection = !Angle360Detection;
        show_message(Angle360Detection);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>13,19</point>
    <point>20,20</point>
  </PhysicsShapePoints>
</object>
